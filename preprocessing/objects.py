# AUTOGENERATED! DO NOT EDIT! File to edit: ../create_objects.ipynb.

# %% auto 0
__all__ = ['add_author_in_list', 'create_objects']

# %% ../create_objects.ipynb 2
from .process_names import load_data, get_author_names_list, extract_names
from .author import Author
from .publication import Publication
import pandas as pd
from sortedcontainers import SortedList

# %% ../create_objects.ipynb 21
def add_author_in_list(author_list, new_author):

    index = author_list.bisect_left(new_author)
    if index < len(author_list):
        existing_author = author_list[index]
        if new_author.same_name(existing_author):
            # combine info from each
            existing_author.merge_names(new_author)
            # combine emails
            existing_author.add_contact_author_info(new_author)
            # publications
            for publication in new_author.publications:
                existing_author.publications.append(publication)
            return existing_author
    # add new_author to list
    author_list.add(new_author)
    return new_author

# %% ../create_objects.ipynb 31
def create_objects(databaseFilePath):
        
    df = load_data(small=False, filePath=databaseFilePath)
    publication_list = []
    author_list = SortedList()
    num_no_authors = 0
    num_no_publication = 0
    
    for index, row in df.iterrows():

        # only process the row if title or contact_email exists
        if (row['title'] or row['doi']):
            author_row_list = [] #List of authors in each publication; author Object
            # create a new publication object
            publication = Publication(id=row['id'], title=row['title'], doi=row['doi'])
            publication.authors = []
            # add the publication to the list
            publication_list.append(publication)
    
            author_names = row['author_names']
            
            if pd.isna(author_names) or (len(author_names) == 0) or (author_names).strip('[\'] ') == '':
                author_exists = False
            else:
                author_exists = True
                author_names_list = get_author_names_list(author_names)
                for author_name in author_names_list:
                    last_name, first_name, middle_name1, middle_name2, middle_name3 = extract_names(author_name)
                    if last_name:
                        # Create an Author object
                        author = Author(last_name, first_name, middle_name1, middle_name2, middle_name3)
                        # Add the publication to the Author's list of publications
                        author_row_list.append(author)
    
            # Create contact author
            contact_name = row["contact_author_name"]
            
            if pd.isna(contact_name) or (len(contact_name) == 0) or (contact_name.strip() == ''):
                contact_exists = False
            else: #Contact exists = no contact name
                contact_exists = True
                contact_last, contact_first, contact_middle, m2, m3 = extract_names(contact_name)
                if contact_last:
                    contact_author = Author(contact_last, contact_first, contact_middle, m2, m3, emails=[row["contact_email"]]) 
                
            
            # If there is no value in author names and contact name, then add to no_authors count
            if not author_exists and not contact_exists:
                num_no_authors = num_no_authors + 1
            elif not author_exists: #No author exists
                existing_author = add_author_in_list(author_list, contact_author)
                publication.authors.append(existing_author)
                existing_author.publications.append(publication)
            elif not contact_exists: #No contact exists
                for author in author_row_list:
                    # Add the Author to the list of Authors
                    existing_author = add_author_in_list(author_list, author)
                    publication.authors.append(existing_author)
                    existing_author.publications.append(publication)
            elif author_exists and contact_exists: #Both author and contact exist
                 # If that author is also the contact author, add an email
                no_match = True
                for author in author_row_list:
                    if (author.same_name(contact_author)):
                        author.add_contact_author_info(contact_author)
                        no_match = False

                    existing_author = add_author_in_list(author_list, author)
                    publication.authors.append(existing_author)
                    existing_author.publications.append(publication)
                    
                if no_match:
                    existing_author = add_author_in_list(author_list, contact_author)
                    publication.authors.append(existing_author)
                    existing_author.publications.append(publication)
        else:
            # If there is no title or contact_email, skip this entry (do not add to lists)
            num_no_publication = num_no_publication + 1
    return (author_list, publication_list)
