# AUTOGENERATED! DO NOT EDIT! File to edit: ../process_names.ipynb.

# %% auto 0
__all__ = ['usecols', 'df', 'df_small', 'load_data', 'get_author_names_list', 'extract_names']

# %% ../process_names.ipynb 3
import pandas as pd
import pprint
import re

# %% ../process_names.ipynb 4
#Reading Excel file with pandas and choosing the sheet we want to work with
usecols = ['id', 'title', 'contact_email', 'contact_author_name', 'doi', 'author_names']

df = pd.read_excel(open('Catalogdatabase-till2018b.xlsx', 'rb'), sheet_name='publication', usecols=usecols)

# Practice functions with a small subset of the entire df
df_small = df.head()

#Displaying Relevant fields we'll work with

df_small

# %% ../process_names.ipynb 6
# TODO: write a function to load the data. Create a parameter called `small` that let's us chose whether to
# return the whole dataframe or just the head (DONE)

def load_data(small=False):
    #Reading Excel file with pandas and choosing the sheet we want to work with
    usecols = ['id', 'title', 'contact_email', 'contact_author_name', 'doi', 'author_names']
    
    df = pd.read_excel(open('Catalogdatabase-till2018b.xlsx', 'rb'), sheet_name='publication', usecols=usecols)

    #Small or full data frame
    if small:
        return df.head()
    else:
        return df
"""
# Test the function
dataframe = load_data()
print("Full DataFrame:")
print(dataframe)

small_dataframe = load_data(small=True)
print("\nSmall DataFrame (head):")
print(small_dataframe)"""

# %% ../process_names.ipynb 12
def get_author_names_list(author_names):
    author_names = author_names.strip("[]").replace("'", "")
    author_names_list = author_names.split(', ')
    return author_names_list

# %% ../process_names.ipynb 35
# TODO: copy-paste your function from above and modify it so that it accounts for new edge cases
    # Check for any name with first two capital letters
def extract_names(full_name):
    # Check for any name with first two capital letters
    pattern_first_two_capital = re.compile(r'^([A-Z])([A-Z])\s+(.*)$')
    match_first_two_capital = pattern_first_two_capital.match(full_name)

    if match_first_two_capital:
        last_name = match_first_two_capital.group(3)
        first_name = match_first_two_capital.group(1)
        middle_initials = match_first_two_capital.group(2)
    else:
        # Fallback to the original splitting
        names = full_name.split(' ')
        last_name = names[-1]
        first_name = names[0]
        middle_initials = ''.join(names[1:-1]) if len(names) > 2 else None

    # Extract individual initials from the middle initials
    if middle_initials:
        middle_initials_list = [initial.upper() for initial in middle_initials]
    else:
        middle_initials_list = []

    while len(middle_initials_list) < 2:
        middle_initials_list.append(None)

    return (last_name, first_name, middle_initials, None)

# Test cases
# print(extract_names('Brown D Lion'))

