# AUTOGENERATED! DO NOT EDIT! File to edit: ../process_names.ipynb.

# %% auto 0
__all__ = ['usecols', 'df', 'df_small', 'load_data', 'get_author_names_list', 'extract_names']

# %% ../process_names.ipynb 3
import pandas as pd
import pprint
import re
import warnings

# %% ../process_names.ipynb 4
#Reading Excel file with pandas and choosing the sheet we want to work with
usecols = ['id', 'title', 'contact_email', 'contact_author_name', 'doi', 'author_names']

df = pd.read_excel(open('Catalogdatabase-till2018b.xlsx', 'rb'), sheet_name='publication', usecols=usecols)

# Practice functions with a small subset of the entire df
df_small = df.head()

#Displaying Relevant fields we'll work with

df_small

# %% ../process_names.ipynb 6
# TODO: write a function to load the data. Create a parameter called `small` that let's us chose whether to
# return the whole dataframe or just the head (DONE)

def load_data(small=False):
    #Reading Excel file with pandas and choosing the sheet we want to work with
    usecols = ['id', 'title', 'contact_email', 'contact_author_name', 'doi', 'author_names']
    
    df = pd.read_excel(open('Catalogdatabase-till2018b.xlsx', 'rb'), sheet_name='publication', usecols=usecols)

    #Small or full data frame
    if small:
        return df.head()
    else:
        return df

# %% ../process_names.ipynb 12
def get_author_names_list(author_names):
    author_names = author_names.strip("[]").replace("'", "")
    author_names_list = author_names.split(', ')
    return author_names_list

# %% ../process_names.ipynb 36
# Fallback to the original splitting

def extract_names(full_name):

    full_name = full_name.replace('.','')
    names = re.sub( r"([A-Z])", r" \1", full_name).split()
    #print(names)
    
    last_name = names[-1]
    first_name = names[0]
    
    middle_name1 = None
    middle_name2 = None 
    middle_name3 = None

    if len(names) > 2:
        middle_name1 = names[1]
        if len(names) > 3:
            middle_name2 = names[2]
            if len(names) >4:
                middle_name3 = names[3]

    return (last_name, first_name, middle_name1, middle_name2, middle_name3)

    
#print(extract_names('Ang G.B. Burnett'))


### Downside of the re. package is that you can't check for edge cases such as MBtt and raise a warning
